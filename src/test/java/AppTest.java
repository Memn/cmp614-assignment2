/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;

public class AppTest {
    private static final String FILES_PARENT = "C:\\Users\\MehmetEminMumcu\\Desktop\\memn\\hacettepe\\cmp614\\assignment2\\resources";
    private static final String TOEFL_QUESTIONS_FILE_PATH = FILES_PARENT + "\\toefl_stemmed.txt";

    private static final String WIKI_ARTICLES_FILE_PATH = FILES_PARENT + "\\assign2.articles";
    private static final String TEST_ARTICLES_FILE_PATH = FILES_PARENT + "\\assign2Test.articles";
    private static final String TESTING_ARTICLES_FILE_PATH = WIKI_ARTICLES_FILE_PATH;

    private static final double TEST_FILE_DOCUMENT_FACTOR = 0.1;

    private final int K = 600;
    private final float EPSILON = 50f;

    @Before
    public void setUp() throws Exception {
    }

    //@Test
    @SuppressWarnings("unused")
    public void buildTestFile() throws Exception {

        File testFile = new File(TEST_ARTICLES_FILE_PATH);
        File source = new File(WIKI_ARTICLES_FILE_PATH);

        try (FileChannel inputChannel = new FileInputStream(source).getChannel();
             FileChannel outputChannel = new FileOutputStream(testFile).getChannel()) {
            outputChannel.transferFrom(inputChannel, 0,
                    (long) (inputChannel.size() * TEST_FILE_DOCUMENT_FACTOR));
        }
    }

    @Test
    public void testBuildVocabulary() throws Exception {

        Map<String, Integer> vocabulary = VocabularyBuilder.getInstance().build(TESTING_ARTICLES_FILE_PATH);
        System.out.println("vocab size: " + vocabulary.size());
//        System.out.println(vocabulary.toString());

    }

    @Test
    public void testGenerateRandomIV() throws Exception {
        short[] randomIV = ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomIV(0.1f);
        IntStream.Builder builder = IntStream.builder();
        for (short i : randomIV) {
            builder.add(i);
        }
        IntStream stream = builder.build();
        Assert.assertEquals(stream.filter(n -> n == 1).count(), 10);
        Assert.assertEquals(stream.filter(n -> n == -1).count(), 10);
        Assert.assertEquals(stream.filter(n -> n == 0).count(), 80);

        randomIV = ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomIV(0.32f);
        builder = IntStream.builder();
        for (short i : randomIV) {
            builder.add(i);
        }
        stream = builder.build();
        Assert.assertEquals(stream.filter(n -> n == 1).count(), 32);
        Assert.assertEquals(stream.filter(n -> n == -1).count(), 32);
        Assert.assertEquals(stream.filter(n -> n == 0).count(), 36);
        System.out.println(StringUtils.join(randomIV));

    }

    @Test
    public void testGenerateRandomVector() throws Exception {
        float[] randomVector = ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomVector(0.12f,
                ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomIV(0.3f), 20);
        float[] finalRandomVector = randomVector;
        DoubleStream ds = IntStream.range(0, randomVector.length).mapToDouble(i -> finalRandomVector[i]);
        Assert.assertEquals(randomVector.length, 20);
        Assert.assertNotEquals("All are same!", ds.distinct().count(), 1);

        randomVector = ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomVector(0.12f,
                ReducedWord2DocumentMatrixBuilder.getInstance().generateRandomIV(0.3151f), 600);
        ds = IntStream.range(0, randomVector.length).mapToDouble(i -> finalRandomVector[i]);
        Assert.assertEquals(randomVector.length, 600);
        Assert.assertNotEquals("All are same!", ds.distinct().count(), 1);


    }

    @Test
    public void testBuildReducedMatrix() throws Exception {

        Map<String, Integer> vocabulary = VocabularyBuilder.getInstance().build(TESTING_ARTICLES_FILE_PATH);
        System.out.println("Vocabulary size: " + vocabulary.size());

        float[][] reducedMatrix = ReducedWord2DocumentMatrixBuilder.getInstance().build(TESTING_ARTICLES_FILE_PATH, vocabulary, K, EPSILON);
        Assert.assertEquals(reducedMatrix[0].length, K);
        Assert.assertEquals(reducedMatrix.length, vocabulary.size());

    }

    @Test
    public void testReadToeflQuestions() throws Exception {
        List<String[]> toeflQuestions = ToeflQuestionAnswerer.getInstance().readToeflQuestions(TOEFL_QUESTIONS_FILE_PATH);
        toeflQuestions.forEach(toeflQuestion -> Assert.assertEquals(5, toeflQuestion.length));
        System.out.println("Number of questions: " + toeflQuestions.size());

    }

    @Test
    public void testAnswerToeflQuestions() throws Exception {

        Map<String, Integer> vocabulary = VocabularyBuilder.getInstance().build(TESTING_ARTICLES_FILE_PATH);

        List<String[]> toeflQuestions = ToeflQuestionAnswerer.getInstance().readToeflQuestions(TOEFL_QUESTIONS_FILE_PATH);

        float[][] reduced = ReducedMatrixBuilder.build(TESTING_ARTICLES_FILE_PATH, vocabulary, K, EPSILON, true);


        System.out.println("vocabulary size: " + vocabulary.size());
        System.out.println("Questions size: " + toeflQuestions.size());
        System.out.printf("Reduced matrix size: %d X %d\n", reduced.length, reduced[0].length);

        System.out.println();

        int[] answers = ToeflQuestionAnswerer.getInstance().answerToeflQuestions(reduced, toeflQuestions, vocabulary);

        App.printAnswers(toeflQuestions, answers);

    }

    @Test
    public void testPrintAnswers() throws Exception {
        List<String[]> toeflQuestions = ToeflQuestionAnswerer.getInstance().readToeflQuestions(TOEFL_QUESTIONS_FILE_PATH);
        int[] answers = randomAnswers(toeflQuestions);

        App.printAnswers(toeflQuestions, answers);
    }

    private int[] randomAnswers(List<String[]> toeflQuestions) {
        int[] answers = new int[toeflQuestions.size()];
        for (int i = 0; i < answers.length; i++) {
            answers[i] = ToeflQuestionAnswerer.getInstance().makeRandomGuess();
        }
        return answers;
    }

    @Test
    public void testUpdateOccurrencesInWindow() throws Exception {

        Map<String, Integer> vocabulary = generateVocabulary();

        float[][] reduced = new float[5][5];
        String[][] documents = {
                {"a", "a", "b", "c", "d", "b"},
                {"a", "b", "c", "a", "e", "a"},
                {"a", "b", "e"},
                {"b", "b", "a", "c"},
                {"c", "a", "b"},
                {"a", "e", "b", "c", "d"}
        };
        float[][] randomVector = {
                {0, 1, -1},
                {-1, 1, 0},
                {0, -1, 1},
                {1, 0, -1},
                {-1, 0, 1}
        };
        float[][] randomVector2 = {
                {1, 0, 0, 0, 0},
                {0, 1, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 1, 0},
                {0, 0, 0, 0, 1}

        };
        for (int i = 0; i < documents.length; i++) {
            for (int j = 0; j < documents[i].length; j++) {
                ReducedWord2WordMatrixBuilder.getInstance().
                        updateOccurrencesInWindow(vocabulary, reduced, documents[i], j, 1, randomVector2);
            }
        }

    }

    private Map<String, Integer> generateVocabulary() {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("a", 0);
        map.put("b", 1);
        map.put("c", 2);
        map.put("d", 3);
        map.put("e", 4);
        return map;
    }
}
