import com.google.common.collect.Table;
import com.google.common.collect.TreeBasedTable;
import com.sun.media.sound.InvalidDataException;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static final int VOCABULARY_SIZE = 50000;
    public static final int MIN_OCCURRENCES = 50;

    Set<String> buildVocabulary(String wikiArticlesFilePath) throws IOException {
        return buildVocabulary(wikiArticlesFilePath, VOCABULARY_SIZE, MIN_OCCURRENCES);
    }

    private Set<String> buildVocabulary(String wikiArticlesFilePath, int vocabularySize, int minOccurrences) throws IOException {
        PatriciaTrie<Long> vocabulary = new PatriciaTrie<>();
        try (LineIterator it = FileUtils.lineIterator(new File(wikiArticlesFilePath), "UTF-8")) {
            while (it.hasNext()) {
                String[] corpus = StringUtils.split(it.nextLine());
                addCorpus2Vocabulary(vocabulary, corpus);
            }
        }
        return filterVocabulary(vocabularySize, minOccurrences, vocabulary);
    }

    private void addCorpus2Vocabulary(PatriciaTrie<Long> vocabulary, String[] corpus) throws InvalidDataException {
        if (corpus.length < 1) {
            throw new InvalidDataException("corpus has no words.");
        }

        PatriciaTrie<Long> wordCounts = countWords(corpus);
        for (Map.Entry<String, Long> entry : wordCounts.entrySet()) {
            String word = entry.getKey();
            Long occurrences = entry.getValue();
            vocabulary.put(word, vocabulary.getOrDefault(word, 0L) + occurrences);
        }
    }

    private Set<String> filterVocabulary(int vocabularySize, int minOccurrences, PatriciaTrie<Long> vocabulary) {
        Set<String> vocab = new HashSet<>();
        vocabulary.values().removeIf(value -> value < minOccurrences);
        vocabulary.entrySet().stream()
                .sorted(Map.Entry.comparingByValue())
                .limit(vocabularySize)
                .forEach(entry -> vocab.add(entry.getKey()));
        return vocab;
    }


    private PatriciaTrie<Long> countWords(String[] corpus) {
        Arrays.sort(corpus);
        PatriciaTrie<Long> trie = new PatriciaTrie<>();
        long count = 0;
        String w = corpus[0];
        for (String word : corpus) {
            if (word.equals(w)) {
                count++;
            } else {
                trie.put(w, count);
                w = word;
                count = 1;
            }
        }
        return trie;
    }

    Table<String, Long, Long> buildTermDocumentMatrix(String wikiArticlesFilePath) throws IOException {
        Set<String> vocabulary = buildVocabulary(wikiArticlesFilePath);
        Table<String, Long, Long> termDocumentMatrix = TreeBasedTable.create();
        try (LineIterator it = FileUtils.lineIterator(new File(wikiArticlesFilePath), "UTF-8")) {
            long documentNumber = 1;
            while (it.hasNext()) {
                String[] corpus = StringUtils.split(it.nextLine());

                if (corpus.length < 1) {
                    throw new InvalidDataException("corpus has no words.");
                }

                PatriciaTrie<Long> wordCounts = countWords(corpus);
                wordCounts.keySet().removeIf(word -> !vocabulary.contains(word));
                long finalDocumentNumber = documentNumber;
                wordCounts.forEach((key, value) -> termDocumentMatrix.put(key, finalDocumentNumber, value));
                documentNumber++;
            }
        }
        return termDocumentMatrix;
    }

    void reduceTermDocumentMatrix(Table<String, Long, Long> termDocumentMatrix, long k, long epsilon) {
        Table<String, Long, Long> reduced = TreeBasedTable.create();
        for (String word : termDocumentMatrix.rowKeySet()) {
            //TODO : not implemented yet.
        }
    }


}
